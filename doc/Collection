:方便的数据结构对于字符串作为键值的元素

Object
d3.keys(obj)
返回一个由属性名组成的数组
d3.values(obj)
返回一个由属性值组成的数组
d3.entries(obj)
返回一个由key：属性名，value：值组成的对象的数组

Map
和ES6的Map数据结相像，但是有一些不同：
keys强制为string
map.each()而不是map.foreach()
map.remove()而不是map.delete()
map.entries()返回一个数组而不是迭代器
map.size()是一个方法而不是一个属性，同样的，还有map.empty()

d3.map([obj[,key]])
创建一个新map，如果obj是详细提供的，则拷贝所有可枚举的属性，如果key函数提供，则用来指明每个值的key
map.has(key)
如果存在这个详细的key对应的键值对，返回true
map.get(key)
返回这个key对应的详细值，如果不存在对应的键值对，返回undefined
map.set(key, value)
设置key对应的值，如果存在，则替换旧值，支持链式调用,返回map
map.remove(key)
如果存在key对应的键值对，就删除掉，并返回true，否则返回false
map.clear()
删除map所有的键值对
map.keys()
返回每个键值对对应的键组成的数组
map.values()
返回每个键值对对应的值组成的数组
map.entries()
返回一个k-v obj组成的数组
map.each(function)
功能和ES6的一样
map.empty()
map.size()

Set
和ES6相似，但是还有些不同
值被强制为string
其他不同和map中的不同一样

d3.set([array[,accessor]])
创建一个新set对象，如果array被详细提供，则array作为string值提供给返回的set，如果accessor存在，则返回前调用array.map(accessor)
set.has(value)
仅当具有一个对应的值时返回true
set.add(value)
为set添加一个值，支持链式调用，返回set
set.remove(value)
set.clear()
set.values()
返回一个值组成的数组
set.each(func)
set.empty()
set.size()

Nests
是一个树型结构，总之，很强大
d3.nest()
创建一个初始nest
nest.key(key)
nest.sortKeys(comparator)
nest.sortValues(comparator)
nest.rollup(func)
nest.map(array)
nest.object(array)
nest.entries(array)





